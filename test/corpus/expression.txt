==================
boolean_expression
==================

lambda foo() => b + 8 * 9 and 101 > 0 < 19

---

(Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (BooleanExpression (left (Expression (PrimaryExpression (BinaryExpression (Addition (left (Identifier)) (right (BinaryExpression (Multiplication (left (Literal (NumberLiteral (IntegerLiteral)))) (right (Literal (NumberLiteral (IntegerLiteral)))))))))))) (Conjunction) (right (Expression (RelationalExpression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))) (GraterThan) (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))) (LessThan) (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))))))))))

================
callable literal
================

lambda foo() => 1(a) > 2

---
   (Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (RelationalExpression (PrimaryExpression (CallOrAccess (expression (Literal (NumberLiteral (IntegerLiteral)))) (call_parameters__list (Expression (PrimaryExpression (Identifier)))))) (GraterThan) (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral))))))))))



========
negation
========

lambda foo() => not a or b

---

  (Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (Negation (expression (Expression (BooleanExpression (left (Expression (PrimaryExpression (Identifier)))) (Disjunction) (right (Expression (PrimaryExpression (Identifier)))))))))))))

================
unary_expression
================

lambda foo() => -1+4

---

(Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (PrimaryExpression (BinaryExpression (Addition (left (UnaryFactor (NegativeFactor (NegativeSign) (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral))))))) (right (Literal (NumberLiteral (IntegerLiteral))))))))))))


============
FunctionCall
============

lambda foo() => f(a)

---

(Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (PrimaryExpression (CallOrAccess (expression (CallableName (Identifier))) (call_parameters__list (Expression (PrimaryExpression (Identifier)))))))))))

===========
ChainedCall
===========

lambda foo() => f(a).f(b)

---

 (Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (PrimaryExpression (FluentCallOrAccess (expression (CallOrAccess (expression (CallableName (Identifier))) (call_parameters__list (Expression (PrimaryExpression (Identifier)))))) (call_identifier (Identifier)) (call_parameters__list (Expression (PrimaryExpression (Identifier)))))))))))

=========
Lambda OK
=========

lambda foo() => lambda () => 1

---

  (Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (PrimaryExpression (Lambda (expression (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))))))))))

===============
Node expression
===============

lambda foo() => { a -> "hola", b -> "chau"}

---

 (Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (PrimaryExpression (Node (edges__list (NodeEdge (identifier (Identifier)) (value (Expression (PrimaryExpression (Literal (StringLiteral))))))) (edges__list (NodeEdge (identifier (Identifier)) (value (Expression (PrimaryExpression (Literal (StringLiteral))))))))))))))

================
Alias expression
================

lambda foo() => 1 as foo
lambda foo() => (a + b) as sum
lambda foo() => { first_name -> "hola" } as xxx

---

 (Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (AliasExpression (value (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))) (alias (Identifier))))))) (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (AliasExpression (value (Expression (PrimaryExpression (ParenthesizedExpression (Expression (PrimaryExpression (BinaryExpression (Addition (left (Identifier)) (right (Identifier)))))))))) (alias (Identifier))))))) (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (AliasExpression (value (Expression (PrimaryExpression (Node (edges__list (NodeEdge (identifier (Identifier)) (value (Expression (PrimaryExpression (Literal (StringLiteral))))))))))) (alias (Identifier))))))))

======
Tuples
======

lambda foo() => lambda () => (4,5,6,7) + (1,2) + (1) + (1,)

---

(Module (declarations__list (NamedLambdaDeclaration (identifier (Identifier)) (expression (Expression (PrimaryExpression (Lambda (expression (Expression (PrimaryExpression (BinaryExpression (Addition (left (BinaryExpression (Addition (left (BinaryExpression (Addition (left (Tuple (elements__list (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))) (elements__list (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))) (elements__list (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))) (elements__list (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))))) (right (Tuple (elements__list (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))) (elements__list (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral))))))))))) (right (ParenthesizedExpression (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))))))) (right (Tuple (elements__list (Expression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral))))))))))))))))))))
