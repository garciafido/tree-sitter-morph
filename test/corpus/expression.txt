==================
boolean_expression
==================

const a = b + 8 * 9 and 101 > 0 < 19

---

    (Module (Module_statements__list (ConstantDeclarationStatement (ConstantDeclarationStatement_name (Identifier (CamelIdentifier))) (AssignmentSign) (ConstantDeclarationStatement_value (Expression (BooleanExpression (BooleanConjunctionExpression_left (Expression (PrimaryExpression (BinaryExpression (Addition (Addition_left (PrimaryExpression (Identifier (CamelIdentifier)))) (Addition_right (PrimaryExpression (BinaryExpression (Multiplication (Multiplication_left (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral))))) (Multiplication_right (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))))))))))) (Conjunction) (BooleanConjunctionExpression_right (Expression (RelationalExpression (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))) (GraterThan) (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))) (LessThan) (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))))))))))



========
negation
========

const foo = not a or b

---

   (Module (Module_statements__list (ConstantDeclarationStatement (ConstantDeclarationStatement_name (Identifier (CamelIdentifier))) (AssignmentSign) (ConstantDeclarationStatement_value (Expression (Negation (Negation_expression (Expression (BooleanExpression (BooleanDisjunctionExpression_left (Expression (PrimaryExpression (Identifier (CamelIdentifier))))) (Disjunction) (BooleanDisjunctionExpression_right (Expression (PrimaryExpression (Identifier (CamelIdentifier))))))))))))))


================
unary_expression
================

const foo = -1+4

---

    (Module (Module_statements__list (ConstantDeclarationStatement (ConstantDeclarationStatement_name (Identifier (CamelIdentifier))) (AssignmentSign) (ConstantDeclarationStatement_value (Expression (PrimaryExpression (BinaryExpression (Addition (Addition_left (PrimaryExpression (UnaryFactor (NegativeFactor (NegativeSign) (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))))) (Addition_right (PrimaryExpression (Literal (NumberLiteral (IntegerLiteral)))))))))))))



============
FunctionCall
============

const foo = f(a)

---


(Module (Module_statements__list (ConstantDeclarationStatement (ConstantDeclarationStatement_name (Identifier (CamelIdentifier))) (AssignmentSign)
(ConstantDeclarationStatement_value
    (Expression
        (PrimaryExpression
            (FunctionCallOrEdgeAccess
                (FunctionCallOrEdgeAccess_accessed_expression
                    (CallableExpression (CallableName (Identifier (CamelIdentifier))))
                )
                (FunctionCallOrEdgeAccess_function_call_parameters__list
                    (Expression (PrimaryExpression (Identifier (CamelIdentifier))))))))))))



===========
ChainedCall
===========

const foo = f(a).f(b)

---


(Module (Module_statements__list (ConstantDeclarationStatement (ConstantDeclarationStatement_name (Identifier (CamelIdentifier)))
(AssignmentSign)
(ConstantDeclarationStatement_value
    (Expression
        (PrimaryExpression
            (ChainedFunctionCallOrEdgeAccess
                (ChainedFunctionCallOrEdgeAccess_accessed_expression
                    (PrimaryExpression
                        (FunctionCallOrEdgeAccess
                            (FunctionCallOrEdgeAccess_accessed_expression
                                (CallableExpression (CallableName (Identifier (CamelIdentifier))))
                            )
                            (FunctionCallOrEdgeAccess_function_call_parameters__list
                                (Expression (PrimaryExpression (Identifier (CamelIdentifier))))
                            ))))
                            (ChainedFunctionCallOrEdgeAccess_function_call_identifier (Identifier (CamelIdentifier)))
                            (ChainedFunctionCallOrEdgeAccess_function_call_parameters__list
                                (Expression (PrimaryExpression (Identifier (CamelIdentifier))))))))))))

=========
Lambda OK
=========

const x = a + b + ((x) => c)

---

